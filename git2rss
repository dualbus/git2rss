#!/usr/bin/perl -w
use strict;

# Copyright (c) 2013, Bennett Todd
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#         Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following
#         disclaimer in the documentation and/or other materials
#         provided with the distribution.
#
#         THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#         CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#         INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#         MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#         DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
#         CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#         SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#           NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#           SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#           INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#         LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#         (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
#         THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
#         OF SUCH DAMAGE.
#
# 2013-10-12 modifications by Eduardo Bustamante <is@dualbus.me>
# 2009-03-01 s/git-log/git log/, thanks to Olivier Berger


=head1 NAME

  git2rss --- generate an RSS summary of a git repo

=head1 SYNOPSIS

  git2rss --url repo-url [--max 20] >name.xml

=head1 DESCRIPTION

git2rss should be run from a git repo. It parses the output of
git log, reading up to the last $max (20 default) entries, and
generates an RSS feed on stdout. The url arg is mandatory.

=cut

use Getopt::Long;
use XML::RSS::SimpleGen;
use IO::File;
use URI;
use Fatal qw(IO::File::new IO::Handle::close);

my $url = undef;
my $title = undef;
my $description = undef;
my $email = undef;
my $max = 20;

my $syntax = "syntax: $0 --url repo-url [--max 20]\n";

# Get options from command line.
GetOptions(
    "description=s" => \$description,
    "email=s" => \$email,
    "max=i" => \$max,
    "title=s" => \$title,
    "url=s" => \$url
    ) or die $syntax;

die "$0: url option is required\n" unless defined $url;


$email = sprintf("postmaster@%s", URI->new($url)->host)
          unless defined $email;


# Change directory ourselves, to access files in the repository using
# relative references. We delete the GIT_DIR variable to avoid git
# interpreting it also. For bare repositories, this should look like:
#   GIT_DIR=/path/to/bare.git git2rss ...
# and for normal repositories:
#   GIT_DIR=/path/to/normal/.git git2rss ...
chdir  $ENV{'GIT_DIR'} or die 'repository does not exist';
delete $ENV{'GIT_DIR'};


# Get the description from the repository in case it wasn't supplied
# as a command line option.
if(!defined $description) {
    if(-r ".git/description") {
        open my $fh, '<', ".git/description";
        $description = do { local $/; <$fh> };
    } elsif(-r "description") {
        open my $fh, '<', "description";
        $description = do { local $/; <$fh> };
    } else {
        $description = 'unknown';
    }
}

# If the title was not set from the command line, then set is as the
# first line of the description.
$title = (split /\n/, $description)[0] unless defined $title;

my $git_command = sprintf('git log --format=raw --max-count=%d |', $max);
my $gitlog = IO::File->new($git_command);

my $rss = XML::RSS::SimpleGen->new($url, $title, $description);
$rss->webMaster($email);



sub push_entry {
    my ($rss, $title, $description) = @_;

    $rss->item($url, $title, $description);
}



sub parse_commit_author {
    my ($line) = @_;

    return ($line, time);
}



my (
    $line,

    $commit,
    $entry_author,
    $entry_date,
    $entry_description,
    @entry_description_raw,
    $entry_title
);

while (defined($_ = $gitlog->getline)) {
    chomp; $line = $_;

    if ($line =~ /^commit /) {

        if(defined $commit) {
            
            $entry_title = @entry_description_raw[0];
            shift @entry_description_raw, 2;
            $entry_description = join "\n", @entry_description_raw;

            push_entry($rss, $entry_title, $entry_description);
        }

        $commit = (split /\s+/, $line)[1];


        $entry_author = $entry_date =
            $entry_description = $entry_title = undef;
    }

    ($entry_author, $entry_date) = parse_commit_author($line)
                                      if $line =~ /^author /;

    push @entry_description_raw, $line if $line =~ /^\s+/;
}

if (defined $entry_title) {
    display_entry($entry_title, $entry_date, $entry_description);
}

print $rss->as_string;
